# Contest Log Analyzer/main_cli.py
#
# Purpose: This is the main command-line interface (CLI) entry point for the
#          Contest Log Analyzer. It now handles multiple log files and can
#          generate specific reports.
#
# Author: Mark Bailey, KD4D
# Contact: kd4d@kd4d.org
# Date: 2025-08-02
# Version: 0.26.0-Beta
#
# Copyright (c) 2025 Mark Bailey, KD4D
#
# License: Mozilla Public License, v. 2.0
#          (https://www.mozilla.org/MPL/2.0/)
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# --- Revision History ---
# All notable changes to this project will be documented in this file.
# The format is based on "Keep a Changelog" (https://keepachangelog.com/en/1.0.0/),
# and this project aims to adhere to Semantic Versioning (https://semver.org/).

## [0.26.0-Beta] - 2025-08-02
### Changed
# - Refactored the complex report generation loop into a new, separate
#   ReportGenerator class to improve separation of concerns.

## [0.25.0-Beta] - 2025-08-01
### Changed
# - Updated the main loop to pass the full list of log paths to the
#   LogManager to support master time index calculation.

## [0.24.2-Beta] - 2025-08-01
### Fixed
# - The auto-generation logic for multiplier reports now correctly handles
#   single-log, multi-log, and pairwise reports based on their class properties.

## [0.24.1-Beta] - 2025-08-01
### Fixed
# - The auto-generation logic for multiplier reports now correctly skips
#   comparative reports (like missed_multipliers) if only one log is provided.
# - Corrected auto-generation logic for single-log reports (like multipliers_by_hour)
#   to correctly instantiate the report for each log individually.

## [0.23.7-Beta] - 2025-08-01
### Fixed
# - The auto-generation logic for multiplier reports now correctly filters
#   rules based on the station's location type (W/VE or DX) for asymmetric
#   contests, preventing inapplicable reports from being generated.

## [0.23.0-Beta] - 2025-08-01
### Changed
# - Refactored data file handling to use a single CONTEST_DATA_DIR environment
#   variable instead of the file-specific CTY_DAT_PATH.
# - The program will now exit if a mix of W/VE and DX station logs are
#   provided for the ARRL-DX contest.

## [0.22.4-Beta] - 2025-07-31
### Added
# - Added a check to detect and report any unrecognized command-line arguments.

## [0.22.3-Beta] - 2025-07-31
### Fixed
# - Refined the report generation logic to prevent duplicate reports. Multi-way
#   reports now only run for 3+ logs, and pairwise for 2+ logs.

## [0.22.2-Beta] - 2025-07-31
### Changed
# - Refactored the report generation logic to be fully data-driven. It now
#   uses the boolean support properties from the report interface to determine
#   how to handle single vs. multiple logs, removing the need for hard-coded lists.

## [0.22.1-Beta] - 2025-07-31
### Changed
# - The program now prints the full usage guide after displaying a specific
#   command-line error, providing better user feedback.

## [0.22.0-Beta] - 2025-07-31
### Changed
# - Improved command-line argument validation to provide clearer, more
#   specific error messages for common mistakes (e.g., '--reports' instead
#   of '--report') and for a missing CTY_DAT_PATH environment variable.

## [0.21.2-Beta] - 2025-07-29
### Changed
# - Comparative reports (e.g., missed_multipliers) now generate both the
#   primary multi-way comparison and all possible two-way comparisons when
#   three or more logs are provided.

## [0.21.1-Beta] - 2025-07-28
### Changed
# - Updated the '--report all' logic to correctly auto-generate the new
#   'multipliers_by_hour' report for all available multiplier types.

## [0.21.0-Beta] - 2025-07-28
### Removed
# - Removed the deprecated '--mult-type' command-line argument, as the new
#   data-driven multiplier logic makes it obsolete.

## [0.16.0-Beta] - 2025-07-26
### Changed
# - The '--report all' command now also auto-generates the 'multiplier_summary'
#   report for all available multiplier types.
### Removed
# - Deprecated the 'venn_diagrams' report by removing it from the list of
#   pairwise reports generated by the '--report all' command.

## [0.14.0-Beta] - 2025-07-23
### Changed
# - Added logic to auto-generate pairwise reports for all combinations of logs.
# - Added a 'charts' output subdirectory.
# - Added '--metric <qsos|points>' argument for difference plots.

## [0.13.0-Beta] - 2025-07-22
### Changed
# - The '--report all' command now auto-generates 'missed_multipliers' reports.
# - Added '--mult-name' argument.

## [0.11.0-Beta] - 2025-07-21
### Changed
# - Added an optional '--include-dupes' flag.

## [0.10.0-Beta] - 2025-07-21
### Changed
# - Integrated the new LogManager and reports packages.
# - Added '--report <id|all>' command-line argument.

## [0.9.1-Beta] - 2025-07-19
### Changed
# - Auto-detects contest name from Cabrillo header.

## [0.9.0-Beta] - 2025-07-18
# - Initial release of the command-line interface.

import sys
import os
from contest_tools.log_manager import LogManager
from contest_tools.reports import AVAILABLE_REPORTS
from contest_tools.report_generator import ReportGenerator # <-- NEW IMPORT

def print_usage_and_exit():
    """Prints the command-line usage guide and exits."""
    print("\nUsage: python main_cli.py --report <ReportID|all> <LogFilePath1> [<LogFile2>...] [options]")
    print("\nOptions:")
    print("  --include-dupes         Include duplicate QSOs in calculations.")
    print("  --mult-name <name>      Specify multiplier for reports (e.g., 'Countries', 'Zones').")
    print("  --metric <qsos|points>  Specify metric for difference plots (defaults to 'qsos').")
    
    if AVAILABLE_REPORTS:
        print("\nAvailable reports:")
        for report_id, report_class in AVAILABLE_REPORTS.items():
            print(f"  - {report_id}: {report_class.report_name}")
    else:
        print("\nNo reports found.")
        
    sys.exit(1)

def main():
    """
    Main function to run the contest log analyzer from the command line.
    """
    print("--- Contest Log Analyzer ---")

    # --- High-Priority Pre-Checks ---
    args = sys.argv[1:]
    
    if 'CONTEST_DATA_DIR' not in os.environ:
        print("\nFATAL ERROR: The CONTEST_DATA_DIR environment variable is not set.")
        print("Please set this variable to the path of your data directory (containing cty.dat).")
        print_usage_and_exit()

    if '--reports' in args:
        print("\nERROR: Invalid argument '--reports' (plural). Did you mean '--report' (singular)?")
        print_usage_and_exit()

    # --- New: Check for any unrecognized arguments ---
    valid_flags = {'--report', '--include-dupes', '--mult-name', '--metric'}
    for arg in args:
        if arg.startswith('--') and arg not in valid_flags:
            print(f"\nERROR: Unrecognized argument '{arg}'")
            print_usage_and_exit()

    # --- Argument Parsing ---
    report_kwargs = {}

    if '--include-dupes' in args:
        report_kwargs['include_dupes'] = True
        args.remove('--include-dupes')
    
    if '--mult-name' in args:
        try:
            mn_index = args.index('--mult-name')
            mult_name = args[mn_index + 1]
            report_kwargs['mult_name'] = mult_name
            args.pop(mn_index)
            args.pop(mn_index)
        except IndexError:
            print(f"\nError: --mult-name flag requires a value (e.g., 'Countries').")
            sys.exit(1)
            
    if '--metric' in args:
        try:
            m_index = args.index('--metric')
            metric = args[m_index + 1].lower()
            if metric not in ['qsos', 'points']:
                raise ValueError("Metric type must be 'qsos' or 'points'.")
            report_kwargs['metric'] = metric
            args.pop(m_index)
            args.pop(m_index)
        except (IndexError, ValueError) as e:
            print(f"\nError with --metric argument: {e}")
            sys.exit(1)

    if len(args) < 2 or args[0] != '--report':
        print_usage_and_exit()

    report_id = args[1]
    log_filepaths = args[2:]

    # --- Input Validation ---
    if report_id.lower() != 'all' and report_id not in AVAILABLE_REPORTS:
        print(f"\nError: Report '{report_id}' not found.")
        sys.exit(1)

    # --- Processing ---
    try:
        log_manager = LogManager()
        for path in log_filepaths:
            log_manager.load_log(path, log_filepaths)
        
        logs = log_manager.get_all_logs()
        if not logs:
            print("\nError: No logs were successfully loaded. Aborting report generation.")
            sys.exit(1)
        
        # --- REFACTORED: Generate reports using the new ReportGenerator class ---
        generator = ReportGenerator(logs)
        generator.run_reports(report_id, **report_kwargs)

        print("\n--- Done ---")

    except Exception as e:
        print(f"\nAn unexpected critical error occurred: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main()