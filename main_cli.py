# Contest Log Analyzer/main_cli.py
#
# Purpose: This is the main command-line interface (CLI) entry point for the
#          Contest Log Analyzer. It now handles multiple log files and can
#          generate specific reports.
#
# Author: Mark Bailey, KD4D
# Contact: kd4d@kd4d.org
# Date: 2025-07-31
# Version: 0.22.2-Beta
#
# Copyright (c) 2025 Mark Bailey, KD4D
#
# License: Mozilla Public License, v. 2.0
#          (https://www.mozilla.org/MPL/2.0/)
#
# This Source Code Form is subject to the terms of the Mozilla Public
# License, v. 2.0. If a copy of the MPL was not distributed with this
# file, You can obtain one at http://mozilla.org/MPL/2.0/.

# --- Revision History ---
# All notable changes to this project will be documented in this file.
# The format is based on "Keep a Changelog" (https://keepachangelog.com/en/1.0.0/),
# and this project aims to adhere to Semantic Versioning (https://semver.org/).

## [0.22.2-Beta] - 2025-07-31
### Changed
# - Refactored the report generation logic to be fully data-driven. It now
#   uses the 'comparison_mode' property from the report interface to determine
#   how to handle single vs. multiple logs, removing the need for hard-coded lists.

## [0.22.1-Beta] - 2025-07-31
### Changed
# - The program now prints the full usage guide after displaying a specific
#   command-line error, providing better user feedback.

## [0.22.0-Beta] - 2025-07-31
### Changed
# - Improved command-line argument validation to provide clearer, more
#   specific error messages for common mistakes (e.g., '--reports' instead
#   of '--report') and for a missing CTY_DAT_PATH environment variable.

## [0.21.2-Beta] - 2025-07-29
### Changed
# - Comparative reports (e.g., missed_multipliers) now generate both the
#   primary multi-way comparison and all possible two-way comparisons when
#   three or more logs are provided.

## [0.21.1-Beta] - 2025-07-28
### Changed
# - Updated the '--report all' logic to correctly auto-generate the new
#   'multipliers_by_hour' report for all available multiplier types.

## [0.21.0-Beta] - 2025-07-28
### Removed
# - Removed the deprecated '--mult-type' command-line argument, as the new
#   data-driven multiplier logic makes it obsolete.

## [0.16.0-Beta] - 2025-07-26
### Changed
# - The '--report all' command now also auto-generates the 'multiplier_summary'
#   report for all available multiplier types.
### Removed
# - Deprecated the 'venn_diagrams' report by removing it from the list of
#   pairwise reports generated by the '--report all' command.

## [0.14.0-Beta] - 2025-07-23
### Changed
# - Added logic to auto-generate pairwise reports for all combinations of logs.
# - Added a 'charts' output subdirectory.
# - Added '--metric <qsos|points>' argument for difference plots.

## [0.13.0-Beta] - 2025-07-22
### Changed
# - The '--report all' command now auto-generates 'missed_multipliers' reports.
# - Added '--mult-name' argument.

## [0.11.0-Beta] - 2025-07-21
### Changed
# - Added an optional '--include-dupes' flag.

## [0.10.0-Beta] - 2025-07-21
### Changed
# - Integrated the new LogManager and reports packages.
# - Added '--report <id|all>' command-line argument.

## [0.9.1-Beta] - 2025-07-19
### Changed
# - Auto-detects contest name from Cabrillo header.

## [0.9.0-Beta] - 2025-07-18
# - Initial release of the command-line interface.

import sys
import os
import itertools
from contest_tools.log_manager import LogManager
from contest_tools.reports import AVAILABLE_REPORTS

def print_usage_and_exit():
    """Prints the command-line usage guide and exits."""
    print("\nUsage: python main_cli.py --report <ReportID|all> <LogFilePath1> [<LogFile2>...] [options]")
    print("\nOptions:")
    print("  --include-dupes         Include duplicate QSOs in calculations.")
    print("  --mult-name <name>      Specify multiplier for reports (e.g., 'Countries', 'Zones').")
    print("  --metric <qsos|points>  Specify metric for difference plots (defaults to 'qsos').")
    
    if AVAILABLE_REPORTS:
        print("\nAvailable reports:")
        for report_id, report_class in AVAILABLE_REPORTS.items():
            print(f"  - {report_id}: {report_class.report_name.fget(None)}")
    else:
        print("\nNo reports found.")
        
    sys.exit(1)

def main():
    """
    Main function to run the contest log analyzer from the command line.
    """
    print("--- Contest Log Analyzer ---")

    # --- High-Priority Pre-Checks ---
    args = sys.argv[1:]
    
    if 'CTY_DAT_PATH' not in os.environ:
        print("\nFATAL ERROR: The CTY_DAT_PATH environment variable is not set.")
        print("Please set this variable to the full path of your cty.dat file.")
        print_usage_and_exit()

    if '--reports' in args:
        print("\nERROR: Invalid argument '--reports' (plural). Did you mean '--report' (singular)?")
        print_usage_and_exit()

    # --- Argument Parsing ---
    report_kwargs = {}

    if '--include-dupes' in args:
        report_kwargs['include_dupes'] = True
        args.remove('--include-dupes')
    
    if '--mult-name' in args:
        try:
            mn_index = args.index('--mult-name')
            mult_name = args[mn_index + 1]
            report_kwargs['mult_name'] = mult_name
            args.pop(mn_index)
            args.pop(mn_index)
        except IndexError:
            print(f"\nError: --mult-name flag requires a value (e.g., 'Countries').")
            sys.exit(1)
            
    if '--metric' in args:
        try:
            m_index = args.index('--metric')
            metric = args[m_index + 1].lower()
            if metric not in ['qsos', 'points']:
                raise ValueError("Metric type must be 'qsos' or 'points'.")
            report_kwargs['metric'] = metric
            args.pop(m_index)
            args.pop(m_index)
        except (IndexError, ValueError) as e:
            print(f"\nError with --metric argument: {e}")
            sys.exit(1)

    if len(args) < 2 or args[0] != '--report':
        print_usage_and_exit()

    report_id = args[1]
    log_filepaths = args[2:]

    # --- Input Validation ---
    if report_id.lower() != 'all' and report_id not in AVAILABLE_REPORTS:
        print(f"\nError: Report '{report_id}' not found.")
        sys.exit(1)

    # --- Processing ---
    try:
        log_manager = LogManager()
        for path in log_filepaths:
            log_manager.load_log(path)
        
        logs = log_manager.get_all_logs()
        if not logs:
            print("\nError: No logs were successfully loaded. Aborting report generation.")
            sys.exit(1)

        reports_to_run = []
        if report_id.lower() == 'all':
            reports_to_run = AVAILABLE_REPORTS.items()
        else:
            reports_to_run = [(report_id, AVAILABLE_REPORTS[report_id])]
        
        # --- Define Output Directory Structure ---
        first_log = logs[0]
        contest_name = first_log.get_metadata().get('ContestName', 'UnknownContest').replace(' ', '_')
        
        first_qso_date = first_log.get_processed_data()['Date'].iloc[0]
        year = first_qso_date.split('-')[0] if first_qso_date else "UnknownYear"

        base_output_dir = os.path.join("reports_output", year, contest_name)
        text_output_dir = os.path.join(base_output_dir, "text")
        plots_output_dir = os.path.join(base_output_dir, "plots")
        charts_output_dir = os.path.join(base_output_dir, "charts")
        
        # --- Generate the selected reports ---
        for r_id, ReportClass in reports_to_run:
            report_type = ReportClass.report_type.fget(None)
            comp_mode = ReportClass.comparison_mode.fget(None)
            
            if report_type == 'text': output_path = text_output_dir
            elif report_type == 'plot': output_path = plots_output_dir
            elif report_type == 'chart': output_path = charts_output_dir
            else: output_path = base_output_dir

            # --- Auto-generate reports for each multiplier type if needed ---
            if r_id in ['missed_multipliers', 'multiplier_summary', 'multipliers_by_hour'] and 'mult_name' not in report_kwargs:
                print(f"\nAuto-generating '{ReportClass.report_name.fget(None)}' for all available multiplier types...")
                for mult_rule in first_log.contest_definition.multiplier_rules:
                    mult_name = mult_rule.get('name')
                    if mult_name:
                        print(f"  - Generating for: {mult_name}")
                        current_kwargs = report_kwargs.copy()
                        current_kwargs['mult_name'] = mult_name
                        
                        instance = ReportClass(logs)
                        result = instance.generate(output_path=output_path, **current_kwargs)
                        print(result)
            
            # --- Handle report generation based on comparison mode ---
            elif comp_mode == 'single':
                print(f"\nGenerating report: '{ReportClass.report_name.fget(None)}' for each log...")
                for log in logs:
                    instance = ReportClass([log])
                    result = instance.generate(output_path=output_path, **report_kwargs)
                    print(result)

            elif comp_mode == 'pairwise':
                if len(logs) < 2:
                    print(f"\nSkipping '{ReportClass.report_name.fget(None)}': requires at least two logs.")
                    continue
                print(f"\nGenerating '{ReportClass.report_name.fget(None)}' for all log pairs...")
                for log_pair in itertools.combinations(logs, 2):
                    instance = ReportClass(list(log_pair))
                    result = instance.generate(output_path=output_path, **report_kwargs)
                    print(result)

            elif comp_mode == 'multi':
                print(f"\nGenerating report: '{ReportClass.report_name.fget(None)}'...")
                instance = ReportClass(logs)
                result = instance.generate(output_path=output_path, **report_kwargs)
                print(result)
            
            elif comp_mode == 'dual':
                print(f"\nGenerating multi-log report: '{ReportClass.report_name.fget(None)}'...")
                instance = ReportClass(logs)
                result = instance.generate(output_path=output_path, **report_kwargs)
                print(result)
                if len(logs) > 2:
                    print(f"\nAlso generating pairwise versions of '{ReportClass.report_name.fget(None)}'...")
                    for log_pair in itertools.combinations(logs, 2):
                        instance = ReportClass(list(log_pair))
                        result = instance.generate(output_path=output_path, **report_kwargs)
                        print(result)

        print("\n--- Done ---")

    except Exception as e:
        print(f"\nAn unexpected critical error occurred: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)

if __name__ == '__main__':
    main()
